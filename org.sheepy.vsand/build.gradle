import org.gradle.internal.os.OperatingSystem
import org.mini2Dx.butler.task.PushTask

plugins {
	id 'application'
	id 'distribution'
	id 'org.mini2Dx.butler'
}

def conf = new ConfigSlurper().parse(file("src/main/resources/version.properties").toURI().toURL())
version = conf.version

switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		project.ext.OS = "windows"
		break
	case OperatingSystem.LINUX:
		project.ext.OS = "linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.OS = "macos"
		break
}

var cleanJlink = tasks.register('cleanJlink', Delete) {
	delete "$buildDir/image"
}

var copyReleng = tasks.register('copyReleng', Copy) {
	from "releng/$project.ext.OS"
	into "$buildDir/image"
}

var copyModules = tasks.register('copyModules', Copy) {
	from "$buildDir/install/org.sheepy.vsand/lib/"
	into "$buildDir/image/modules"
}

tasks.register('jlink', Exec) {
	dependsOn(tasks.named('installDist'), cleanJlink)
	def javaHome = System.properties.'java.home'
	workingDir "$buildDir"
	commandLine "$javaHome/bin/jlink",
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			'--exclude-files', '**java_*.properties',
			'--compress', '2',
			'--add-modules', "java.base,java.xml,jdk.unsupported",
			'--output', 'image'
	finalizedBy(copyReleng, copyModules)
}

tasks.named('clean').configure {dependsOn(cleanJlink) }

butler {
	user = "ealrann"
	game = "vsand"
	userVersion = project.version
}

tasks.register('butlerPushWindows', PushTask) {
	binDirectory = new File("$projectDir/build/image/")
	channel = "windows"
}

tasks.register('butlerPushLinux', PushTask) {
	binDirectory = new File("$projectDir/build/image")
	channel = "linux"
}

run {
	enableAssertions = true
}

application {
	mainModule = 'org.sheepy.vsand'
	mainClass = 'org.sheepy.vsand.VSandApplicationLauncher'
	// mainClass = 'org.sheepy.vsand.VSandBenchmarkLauncher'
}

test {
	useJUnitPlatform()
}

// Temporary: https://github.com/gradle/gradle/issues/890#issuecomment-613427968
test { classpath = configurations.named(sourceSets.test.runtimeClasspathConfigurationName).get() + files(compileTestJava) }
dependencies { testImplementation project(path) }
// end Temporary ---------------------------------------------------------------

dependencies {

	implementation 'org.sheepy.lily.vulkan:org.sheepy.lily.vulkan.api'
	implementation 'org.sheepy.lily.vulkan:org.sheepy.lily.vulkan.extra.api'

	runtimeOnly 'org.sheepy.lily.vulkan:org.sheepy.lily.vulkan.base'
	runtimeOnly 'org.sheepy.lily.vulkan:org.sheepy.lily.vulkan.extra.nuklear'
	runtimeOnly 'org.sheepy.lily.vulkan:org.sheepy.lily.openal.core'

	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
}

sourceSets {
	main {
		java.srcDirs += ['src/generated/java',
						 'src/main/shader']
	}
}
