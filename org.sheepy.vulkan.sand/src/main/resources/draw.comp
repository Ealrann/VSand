#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1248
#define HEIGHT 704

#define CHUNK_WIDTH 39
#define CHUNK_HEIGHT 22

#define WORKGROUP_SIZE_X 32
#define WORKGROUP_SIZE_Y 32

#define SQUARE		0
#define CIRCLE		1
#define LINE		2

#define MATERIAL_COUNT 32

layout (local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y, local_size_z = 1) in;

// The game board, with all the values.
layout(binding = 0) buffer SBoard
{
	int data[WIDTH][HEIGHT];
	int chunks[CHUNK_WIDTH][CHUNK_HEIGHT];
}board;

layout(binding = 1) uniform attributeBuffer
{
	// Shape to draw
	int shape;
	int size;
	int x;
	int y;

	// BoundingBox
	int minX;
	int minY;
	int maxX;
	int maxY;

	// For line, Rectangle to draw
	int x1;
	int y1;
	int x2;
	int y2;
	int x3;
	int y3;
	int x4;
	int y4;

	int value;

}attributes;

bool testCircle(int x, int y);
bool testLine(int x, int y);
int computeSide(int x, int y, int x1, int y1, int x2, int y2);

void main()
{
	if (gl_GlobalInvocationID.y < HEIGHT)
	{
		int x = int(gl_GlobalInvocationID.x);
		int y = int(gl_GlobalInvocationID.y);

		if (x >= attributes.minX && y >= attributes.minY && x <= attributes.maxX
				&& y <= attributes.maxY)
		{
			bool isInShape = false;
			switch (attributes.shape)
			{
			case SQUARE:
				isInShape = true;
				break;
			case CIRCLE:
				isInShape = testCircle(x, y);
				break;
			case LINE:
				isInShape = testLine(x, y) || testCircle(x, y);
				break;
			}

			if (isInShape)
			{
				board.data[x][y] = attributes.value;
				board.chunks[gl_WorkGroupID.x][gl_WorkGroupID.y] = 7;
			}
		}
	}
}

bool testCircle(int x, int y)
{
	int distX = (attributes.x - x) * (attributes.x - x);
	int distY = (attributes.y - y) * (attributes.y - y);

	int halfSize = attributes.size >> 1; // divde by 2;

	return (distX + distY) <= (halfSize * halfSize);
}

bool testLine(int x, int y)
{
	// Algo from https://stackoverflow.com/a/2752753/4030058
	int x1 = attributes.x1;
	int y1 = attributes.y1;
	int x2 = attributes.x2;
	int y2 = attributes.y2;
	int x3 = attributes.x3;
	int y3 = attributes.y3;
	int x4 = attributes.x4;
	int y4 = attributes.y4;

	if (computeSide(x, y, x1, y1, x2, y2) < 0 || computeSide(x, y, x2, y2, x3, y3) < 0
			|| computeSide(x, y, x3, y3, x4, y4) < 0 || computeSide(x, y, x4, y4, x1, y1) < 0)
		return false;

	return true;
}

int computeSide(int x, int y, int x1, int y1, int x2, int y2)
{
	int A = -(y2 - y1);
	int B = x2 - x1;
	int C = -(A * x1 + B * y1);

	return A * x + B * y + C;
}
