#version 450

#define WIDTH 1024
#define HEIGHT 512
//#define WIDTH 2048
//#define HEIGHT 1152
#define WORKGROUP_SIZE 128

layout (local_size_x = 1, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct Entry
{
	int isStatic;
	int density;
	int runoff;
	int viscosity;
	float r;
	float g;
	float b;

	// Padding for the alignement
	float padding1;
};

layout(binding = 0) uniform SConfiguration
{
	Entry materials[16];
}configuration;

layout(binding = 1) buffer buf2
{
	uint data[WIDTH][HEIGHT];
}board;

int check(int x, int y, int runoff, int dir, int srcDensity);
uint getValue(int x, int y);
void setValue(int x, int y, uint value);

void main()
{
	int y = int(gl_GlobalInvocationID.y);

	int startLocation = -1;
	uint prevValue = 0;
	uint nodeValue = 0;

	for (int x = 0; x < WIDTH + 1; x++)
	{
		uint nextValue = x < WIDTH ? getValue(x, y) : 0;

		// If we swapped last iteration, we enter in a new node
		if (startLocation == -2)
		{
			startLocation = x;
			nodeValue = nextValue;
		}
		else if (nextValue != nodeValue)
		{
//				if(startLocation >= 0) ;board.data[1][1] = 2;
			if (configuration.materials[nodeValue].isStatic == 0)
			{
				int endLocation = x - 1;
				int underLeftDensity = 0;
				int underRightDensity = 0;
				if (y < (HEIGHT - 1))
				{
					uint valueUnderLeft = startLocation >= 0 ? getValue(startLocation, y + 1) : 0;
					uint valueUnderRight = getValue(endLocation, y + 1);
					underLeftDensity = configuration.materials[valueUnderLeft].density;
					underRightDensity = configuration.materials[valueUnderRight].density;
				}

				int nodeDensity = configuration.materials[nodeValue].density;
				int nodeRunoff = configuration.materials[nodeValue].runoff;
				// we have now to deal with a node of nodeValue.

				bool freeLeft = configuration.materials[prevValue].isStatic == 0
						&& configuration.materials[prevValue].density < nodeDensity;
				bool freeRight = configuration.materials[nextValue].isStatic == 0
						&& configuration.materials[nextValue].density < nodeDensity;

				int holeLeft = check(startLocation - 1, y + 1, nodeRunoff, -1, nodeDensity);
				int holeRight = check(endLocation + 1, y + 1, nodeRunoff, 1, nodeDensity);

				freeLeft = freeLeft && holeLeft < nodeRunoff;
				freeRight = freeRight && holeRight < nodeRunoff;

				bool fallDownLeft = nodeDensity > underLeftDensity;
				bool fallDownRight = nodeDensity > underRightDensity;
				bool moveLeft = freeLeft && (!fallDownLeft || !freeRight);
				bool moveRight = freeRight && (!fallDownRight || !freeLeft);

				// Determiner oÃ¹ l'on cut.
				int length = endLocation - startLocation + 1;

				int cutPosLeft = startLocation + nodeRunoff - holeLeft;
				int cutPosRight = endLocation - nodeRunoff + holeRight;


				if (moveLeft && moveRight)
				{
					// if we try to move a single pixel
					if (length == 1)
					{
						if (mod(y + x, 2) == 0)
						{
							moveLeft = false;
						}
						else
						{
							moveRight = false;
						}
					}
					else if (cutPosLeft >= cutPosRight)
					{
						int delta = int(ceil(float(cutPosLeft - cutPosRight + 1) / 2.0));
						cutPosLeft -= delta;
						cutPosRight += delta;
					}
				}

				// clamp
				if (moveLeft && cutPosLeft > endLocation)
				{
					cutPosLeft = endLocation;
				}
				if (moveRight && cutPosRight < startLocation)
				{
					cutPosRight = startLocation;
				}

				if (moveLeft)
				{
					setValue(cutPosLeft, y, prevValue);
					if ((startLocation - 1) >= 0)
						setValue(startLocation - 1, y, nodeValue);
				}
				if (moveRight)
				{
					setValue(cutPosRight, y, nextValue);
					if ((endLocation + 1) < WIDTH)
						setValue(endLocation + 1, y, nodeValue);
				}

				// Prepare the next round

				if (moveRight)
				{
					startLocation = -2;
					prevValue = nodeValue;
					nodeValue = -1;
				}
				else
				{
					startLocation = x;
					prevValue = nodeValue;
					nodeValue = nextValue;
				}
			}
			else
			{
				startLocation = x;
				prevValue = nodeValue;
				nodeValue = nextValue;
			}
		}
	}
}

int check(int x, int y, int runoff, int dir, int srcDensity)
{
	int course = 0;
	if (y >= 0 && y < HEIGHT)
	{
		for (; course < runoff; course++)
		{
			if (x >= 0 && x < WIDTH)
			{
				//			int valueAbove = board.data[x][y - 1];
				//			if (configuration.materials[valueAbove].isStatic == 1
				//					|| configuration.materials[valueAbove].density > srcDensity)
				//			{
				//				// stuck
				//				return false;
				//			}

				uint value = getValue(x, y);
				if (configuration.materials[value].isStatic == 0
						&& configuration.materials[value].density < srcDensity)
				{
					break;
				}
			}
			else
			{
				break;
			}
			x += dir;
		}
	}

	return course;
}

uint getValue(int x, int y)
{
	return board.data[x][y] >> 16;
}

void setValue(int x, int y, uint value)
{
	board.data[x][y] = board.data[x][y] >> 16;
	board.data[x][y] = (board.data[x][y] << 16) | value;
}
