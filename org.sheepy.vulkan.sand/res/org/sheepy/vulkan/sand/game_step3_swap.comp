#version 450

#define WIDTH 1024
#define HEIGHT 512
//#define WIDTH 2048
//#define HEIGHT 1152
#define WORKGROUP_SIZE 32

#define UP    0
#define DOWN  1
#define RIGHT 2
#define LEFT  3

#define TO_UP    1 << 0
#define TO_DOWN  1 << 1
#define TO_RIGHT 1 << 2
#define TO_LEFT  1 << 3

#define RANDOM_1_LOC  8
#define RANDOM_2_LOC  10
#define RANDOM_3_LOC  12
#define RANDOM_4_LOC  14

const uint MOVED_TAG = 1 << 4;
const uint TO_VALUE_FLAG = 15 << 16;

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct Entry
{
	int isStatic;
	int density;
	int runoff;
	float viscosity;
	float r;
	float g;
	float b;

	// Padding for the alignement
	float padding1;
};

layout(binding = 0) uniform SConfiguration
{
	Entry materials[16];
}configuration;

layout(binding = 1) uniform FrameUniformBuffer
{
	uint random;
}FUB;

layout(binding = 2) buffer SBoard
{
	int data[WIDTH][HEIGHT];
}board;

layout(binding = 3) buffer SDecision
{
	uint data[WIDTH][HEIGHT];
}decision;

/**
 * Here, we will apply the swap
 */
void main()
{
	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);

	// We will take the value of our target neighbor if he do the same move.
	uint dir = decision.data[x][y] & 15;

	if (dir != 0)
	{
		int value = board.data[x][y];
		// resolve the direction
		uint invertDir = 0;
		int targetX = x;
		int targetY = y;
		switch (dir)
		{
		case TO_RIGHT:
			targetX += 1;
			invertDir = TO_LEFT;
			break;
		case TO_LEFT:
			targetX -= 1;
			invertDir = TO_RIGHT;
			break;
		case TO_UP:
			targetY -= 1;
			invertDir = TO_DOWN;
			break;
		default:
			targetY += 1;
			invertDir = TO_UP;
		}

		bool validPosition = targetX >= 0 && targetX < WIDTH && targetY >= 0 && targetY < HEIGHT;
		if (!validPosition || (decision.data[targetX][targetY] & invertDir) != 0)
		{
			uint targetValue = (decision.data[x][y] & TO_VALUE_FLAG) >> 16;

			decision.data[x][y] = ((decision.data[x][y] << 8) >> 8) | (targetValue << 24)
					| MOVED_TAG;

			// If we swap on Air, we will try to swap a full column.
			if (targetValue == 0 && (dir == TO_UP || dir == TO_DOWN))
			{
				int direction = y < targetY ? -1 : 1;
				bool end = false;
				while (!end)
				{
					int iterateY = y + direction;
					if (iterateY >= 0 && iterateY < HEIGHT && board.data[x][iterateY] == value
							&& (decision.data[x][iterateY] & 31) == 0)
					{
						y = iterateY;
						decision.data[x][y] |= MOVED_TAG;
					}
					else
					{
						end = true;
					}
				}
			}

			board.data[x][y] = int(targetValue);
		}
	}
}

