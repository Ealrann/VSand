#version 450

#define WIDTH 1024
#define HEIGHT 512
//#define WIDTH 2048
//#define HEIGHT 1152
#define WORKGROUP_SIZE 32

#define UP    0
#define DOWN  1
#define RIGHT 2
#define LEFT  3

#define TO_UP    1 << 0
#define TO_DOWN  1 << 1
#define TO_RIGHT 1 << 2
#define TO_LEFT  1 << 3

#define RANDOM_1_LOC  8
#define RANDOM_2_LOC  10
#define RANDOM_3_LOC  12
#define RANDOM_4_LOC  14

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct Entry
{
	int isStatic;
	int density;
	int runoff;
	float viscosity;
	float r;
	float g;
	float b;

	// Padding for the alignement
	float padding1;
};

layout(binding = 0) uniform SConfiguration
{
	Entry materials[16];
}configuration;

layout(binding = 1) uniform FrameUniformBuffer
{
	uint random;
}FUB;

layout(binding = 2) readonly buffer SBoard
{
	int data[WIDTH][HEIGHT];
}board;

layout(binding = 3) buffer SDecision
{
	uint data[WIDTH][HEIGHT];
}decision;

int check(int x, int y, int runoff, int dir, int srcDensity);

/**
 * Here, we will choose one favourite destination.
 */
void main()
{
	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);

	int currentValue = board.data[x][y];
	// Erase Tag,
	// Erase previous value
	// and Store the current value to the decision buffer.
	decision.data[x][y] = (((decision.data[x][y] >> 8) << 24) >> 16) | (currentValue << 16);

	if (configuration.materials[currentValue].isStatic == 0)
	{
		int density = configuration.materials[currentValue].density;

		int valueUp = y > 0 ? board.data[x][y - 1] : 0;
		int valueDown = y < (HEIGHT - 1) ? board.data[x][y + 1] : 0;
		// Make a list of available directions

		if (configuration.materials[valueDown].isStatic == 0
				&& density > configuration.materials[valueDown].density)
		{
			decision.data[x][y] |= TO_DOWN;
		}
		else
		{
			// If not fallingdown, we check the right/left move
			int valueLeft = x > 0 ? board.data[x - 1][y] : 0;
			int valueRight = x < (WIDTH - 1) ? board.data[x + 1][y] : 0;

			int runoff = configuration.materials[currentValue].runoff;
			int distLeft = runoff;
			int distRight = runoff;

			if (configuration.materials[valueLeft].density < density)
			{
				distLeft = check(x - 1, y + 1, runoff, -1, density);
			}
			if (configuration.materials[valueRight].density < density)
			{
				distRight = check(x + 1, y + 1, runoff, 1, density);
			}

			bool right = distRight < runoff;
			bool left = distLeft < runoff;

			if (right || left)
			{
				uint tag = 0;
				if (right && left)
				{
					if (distRight < distLeft)
					{
						tag = TO_RIGHT;
					}
					else if (distRight > distLeft)
					{
						tag = TO_LEFT;
					}
					else // if (distLeft == fistRight)
					{
						if (mod(FUB.random, 2) == 0)
							tag = TO_RIGHT;
						else
							tag = TO_LEFT;
					}
				}
				else
				{
					if (right)
					{
						tag = TO_RIGHT;
					}
					else if (left)
					{
						tag = TO_LEFT;
					}
				}
				decision.data[x][y] |= tag;
			}
		}
	}
}

int check(int x, int y, int runoff, int dir, int srcDensity)
{
	int course = 0;
	if (y >= 0 || y < HEIGHT)
	{
		while (runoff != 0)
		{
			if (x >= 0 && x < WIDTH)
			{
				int value = board.data[x][y];
				if (configuration.materials[value].isStatic == 0
						&& configuration.materials[value].density < srcDensity)
				{
					break;
				}
			}
			else
			{
				break;
			}
			x += dir;
			runoff--;
			course++;
		}
	}

	return course;
}
