@GenModel(modelDirectory="/org.sheepy.vsand.model/src/generated/java")
@GenModel(editDirectory="/org.sheepy.vsand.model.edit/src/generated/java")
@GenModel(editorDirectory="/org.sheepy.vsand.model.editor/src/generated/java", creationSubmenus="true",
	multipleEditorPages="false")
@GenModel(modelName="VSand", prefix="VSand", operationReflection="false")
@GenModel(complianceLevel="11.0", resource="XMI")
@GenModel(childCreationExtenders="true")

package org.sheepy.vsand.model

import org.sheepy.lily.core.model.application.Application
import org.sheepy.lily.core.model.presentation.IPanel
import org.sheepy.lily.vulkan.model.process.CompositeTask
import org.sheepy.lily.vulkan.model.resource.ConstantBuffer

class VSandApplication extends Application
{
	contains Materials[1..1] materials
	contains Transformations[1..1] transformations

	contains DrawCommand[] drawQueue

	refers Material mainMaterial
	refers Material secondaryMaterial

	// Will render one frame, then pause.
	boolean nextMode = "false"
	boolean paused = "false"
	int speed = "1"
	boolean forceClear = "false"
	boolean showSleepZones = "false"

	int brushSize = "4"
	
	refers CompositeTask boardUpdateTask
}

class BoardConstantBuffer extends ConstantBuffer
{
	int currentBoardBuffer = "0"
}

class DrawConstantBuffer extends ConstantBuffer
{
	refers BoardConstantBuffer boardConstantBuffer
}

class PixelConstantBuffer extends ConstantBuffer
{
	refers BoardConstantBuffer boardConstantBuffer
}

interface DrawCommand
{
	refers Material material
}

class DrawCircle extends DrawCommand
{
	int x
	int y
	int size
}

class DrawSquare extends DrawCommand
{
	int x
	int y
	int size
}

class DrawLine extends DrawCommand
{
	int x1
	int y1
	int x2
	int y2
	int size
}

class Materials
{
	contains Material[] materials
}

class Material
{
	@GenModel(propertyCategory="Basic")
	String name
	@GenModel(propertyCategory="Basic")
	boolean isStatic
	@GenModel(propertyCategory="Basic")
	int density
	@GenModel(propertyCategory="Basic")
	int runoff

	@GenModel(propertyCategory="Color")
	int r = "0"
	@GenModel(propertyCategory="Color")
	int g = "0"
	@GenModel(propertyCategory="Color")
	int b = "0"

	@GenModel(propertyCategory="UI")
	boolean userFriendly = "true"
}

class Transformations
{
	contains Transformation[] transformations
}

class Transformation
{
 	@GenModel(notify="true")
	refers Material reactant
 	@GenModel(notify="true")
	refers Material catalyst
 	@GenModel(notify="true")
	refers Material target
	int probability
	int propagation = "1"
	boolean isStaticTransformation
}

class MaterialSelectorPanel extends IPanel
{
	@GenModel(propertyCategory="UI")
	int lineHeight = "32"

	@GenModel(propertyCategory="Primary Color")
	int primaryR = "255"
	@GenModel(propertyCategory="Primary Color")
	int primaryG = "50"
	@GenModel(propertyCategory="Primary Color")
	int primaryB = "50"

	@GenModel(propertyCategory="Secondary Color")
	int secondaryR = "50"
	@GenModel(propertyCategory="Secondary Color")
	int secondaryG = "50"
	@GenModel(propertyCategory="Secondary Color")
	int secondaryB = "255"
}
